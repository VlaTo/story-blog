// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StoryBlog.Web.Microservices.Identity.Infrastructure.Persistence;

#nullable disable

namespace StoryBlog.Web.Microservices.Identity.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(StoryBlogIdentityDbContext))]
    partial class StoryBlogIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("NonEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequireResourceIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ApiResources", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(32767)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32767)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(156)
                        .IsUnicode(true)
                        .HasColumnType("character varying(156)");

                    b.Property<bool>("Emphasize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("NonEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ApiScopes", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AbsoluteRefreshTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(25920000000000L);

                    b.Property<long>("AccessTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(36000000000L);

                    b.Property<int>("AccessTokenType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowOfflineAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowPlainTextPkce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowRememberConsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("AlwaysSendClientClaims")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<long>("AuthorizationCodeLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(3000000000L);

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)");

                    b.Property<long>("CibaLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(36000000000L);

                    b.Property<string>("ClientClaimsPrefix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasDefaultValue("client_");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClientUri")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)");

                    b.Property<long?>("ConsentLifetime")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<long>("DeviceCodeLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(3000000000L);

                    b.Property<bool>("EnableLocalLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)");

                    b.Property<long>("IdentityTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(3000000000L);

                    b.Property<bool>("IncludeJwtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)");

                    b.Property<bool>("NonEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PairWiseSubjectSalt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PollingInterval")
                        .HasColumnType("bigint");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("oidc");

                    b.Property<int>("RefreshTokenExpiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("RefreshTokenUsage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("RequireClientSecret")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequireConsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequirePkce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequireRequestObject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("SlidingRefreshTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(12960000000000L);

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCodeType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("UserSsoLifetime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Clients", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.DeviceFlowCode", b =>
                {
                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)");

                    b.Property<string>("Description")
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasIndex("ClientId", "DeviceCode");

                    b.ToTable("DeviceFlowCodes", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.IdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32767)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32767)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastAccessed")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NonEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(32767)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32767)");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("IdentityProviders", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("Emphasize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("NonEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("IdentityResources", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(32767)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32767)");

                    b.Property<bool>("DataProtected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsX509Certificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Use")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Keys", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.PersistedGrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)");

                    b.Property<string>("Description")
                        .HasMaxLength(32767)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32767)");

                    b.Property<DateTimeOffset?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.ToTable("PersistedGrants", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.ServerSideSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasMaxLength(32767)
                        .HasColumnType("character varying(32767)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32767)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32767)");

                    b.Property<DateTimeOffset?>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("Renewed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.ToTable("ServerSideSessions", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("Modified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("Modified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("Modified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiResource", b =>
                {
                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiResourceClaim", "UserClaims", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ApiResourceId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiResourceId");

                            b1.HasIndex("Type");

                            b1.ToTable("ApiResourceClaims", "Identity");

                            b1.WithOwner("ApiResource")
                                .HasForeignKey("ApiResourceId");

                            b1.Navigation("ApiResource");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiResourceProperty", "Properties", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ApiResourceId")
                                .HasColumnType("integer");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiResourceId");

                            b1.ToTable("ApiResourceProperties", "Identity");

                            b1.WithOwner("ApiResource")
                                .HasForeignKey("ApiResourceId");

                            b1.Navigation("ApiResource");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiResourceScope", "Scopes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ApiResourceId")
                                .HasColumnType("integer");

                            b1.Property<string>("Scope")
                                .IsRequired()
                                .HasMaxLength(256)
                                .IsUnicode(true)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiResourceId");

                            b1.HasIndex("Scope");

                            b1.ToTable("ApiResourceScopes", "Identity");

                            b1.WithOwner("ApiResource")
                                .HasForeignKey("ApiResourceId");

                            b1.Navigation("ApiResource");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiResourceSecret", "Secrets", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ApiResourceId")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("Created")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.Property<DateTimeOffset?>("Expiration")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiResourceId");

                            b1.HasIndex("Type");

                            b1.ToTable("ApiResourceSecrets", "Identity");

                            b1.WithOwner("ApiResource")
                                .HasForeignKey("ApiResourceId");

                            b1.Navigation("ApiResource");
                        });

                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiScope", b =>
                {
                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiScopeClaim", "UserClaims", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ScopeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("ScopeId");

                            b1.HasIndex("Type");

                            b1.ToTable("ApiScopeClaims", "Identity");

                            b1.WithOwner("Scope")
                                .HasForeignKey("ScopeId");

                            b1.Navigation("Scope");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ApiScopeProperty", "Properties", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<int>("ScopeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("ScopeId");

                            b1.ToTable("ApiScopeProperties", "Identity");

                            b1.WithOwner("Scope")
                                .HasForeignKey("ScopeId");

                            b1.Navigation("Scope");
                        });

                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.Client", b =>
                {
                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientClaim", "Claims", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Type");

                            b1.ToTable("ClientClaims", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientCorsOrigin", "AllowedCorsOrigins", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Origin")
                                .IsRequired()
                                .HasMaxLength(2083)
                                .HasColumnType("character varying(2083)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Origin");

                            b1.ToTable("ClientCorsOrigins", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientGrantType", "AllowedGrantTypes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("GrantType")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("GrantType");

                            b1.ToTable("ClientGrantTypes", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientIdPRestriction", "IdentityProviderRestrictions", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Provider")
                                .IsUnique();

                            b1.ToTable("ClientIdPRestrictions", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientPostSignOutRedirectUri", "PostLogoutRedirectUris", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("PostLogoutRedirectUri")
                                .IsRequired()
                                .HasMaxLength(2083)
                                .HasColumnType("character varying(2083)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("PostLogoutRedirectUri")
                                .IsUnique();

                            b1.ToTable("ClientPostLogoutRedirectUris", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientProperty", "Properties", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Key");

                            b1.ToTable("ClientProperties", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientRedirectUri", "RedirectUris", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("RedirectUri")
                                .IsRequired()
                                .HasMaxLength(2083)
                                .HasColumnType("character varying(2083)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("RedirectUri")
                                .IsUnique();

                            b1.ToTable("ClientRedirectUris", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientScope", "AllowedScopes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Scope")
                                .IsRequired()
                                .HasMaxLength(256)
                                .IsUnicode(true)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Scope");

                            b1.ToTable("ClientScopes", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.ClientSecret", "ClientSecrets", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("Created")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.Property<DateTimeOffset?>("Expiration")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .IsUnicode(true)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Type");

                            b1.ToTable("ClientSecrets", "Identity");

                            b1.WithOwner("Client")
                                .HasForeignKey("ClientId");

                            b1.Navigation("Client");
                        });

                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.IdentityResource", b =>
                {
                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.IdentityResourceClaim", "UserClaims", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("IdentityResourceId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("IdentityResourceId");

                            b1.ToTable("IdentityResourceClaims", "Identity");

                            b1.WithOwner("IdentityResource")
                                .HasForeignKey("IdentityResourceId");

                            b1.Navigation("IdentityResource");
                        });

                    b.OwnsMany("StoryBlog.Web.Microservices.Identity.Domain.Entities.IdentityResourceProperty", "Properties", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("IdentityResourceId")
                                .HasColumnType("integer");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32767)
                                .HasColumnType("character varying(32767)");

                            b1.HasKey("Id");

                            b1.HasIndex("IdentityResourceId");

                            b1.ToTable("IdentityResourceProperties", "Identity");

                            b1.WithOwner("IdentityResource")
                                .HasForeignKey("IdentityResourceId");

                            b1.Navigation("IdentityResource");
                        });

                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogRoleClaim", b =>
                {
                    b.HasOne("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserClaim", b =>
                {
                    b.HasOne("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserLogin", b =>
                {
                    b.HasOne("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserRole", b =>
                {
                    b.HasOne("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUserToken", b =>
                {
                    b.HasOne("StoryBlog.Web.Microservices.Identity.Domain.Entities.StoryBlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
