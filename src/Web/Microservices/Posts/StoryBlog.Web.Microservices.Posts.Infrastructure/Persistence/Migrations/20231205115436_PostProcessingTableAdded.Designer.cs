// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StoryBlog.Web.Microservices.Posts.Infrastructure.Persistence;

#nullable disable

namespace StoryBlog.Web.Microservices.Posts.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PostsDbContext))]
    [Migration("20231205115436_PostProcessingTableAdded")]
    partial class PostProcessingTableAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StoryBlog.Web.Microservices.Posts.Domain.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.ToTable("Posts", "Blog");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Posts.Domain.Entities.PostProcessTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("Completed")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostKey")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("PostProcessTasks", "Blog");
                });

            modelBuilder.Entity("StoryBlog.Web.Microservices.Posts.Domain.Entities.Post", b =>
                {
                    b.OwnsOne("StoryBlog.Web.Microservices.Posts.Domain.Entities.CommentsCounter", "CommentsCounter", b1 =>
                        {
                            b1.Property<long>("PostId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Counter")
                                .HasColumnType("bigint");

                            b1.HasKey("PostId");

                            b1.HasIndex("PostId")
                                .IsUnique();

                            b1.ToTable("CommentsCounters", "Blog");

                            b1.WithOwner("Post")
                                .HasForeignKey("PostId");

                            b1.Navigation("Post");
                        });

                    b.OwnsOne("StoryBlog.Web.Microservices.Posts.Domain.Entities.Content", "Content", b1 =>
                        {
                            b1.Property<long>("PostId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Brief")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .IsUnicode(true)
                                .HasColumnType("character varying(1024)");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .IsUnicode(true)
                                .HasColumnType("text");

                            b1.HasKey("PostId");

                            b1.ToTable("Contents", "Blog");

                            b1.WithOwner("Post")
                                .HasForeignKey("PostId");

                            b1.Navigation("Post");
                        });

                    b.OwnsOne("StoryBlog.Web.Microservices.Posts.Domain.Entities.Slug", "Slug", b1 =>
                        {
                            b1.Property<long>("PostId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(250)
                                .IsUnicode(true)
                                .HasColumnType("character varying(250)");

                            b1.HasKey("PostId");

                            b1.HasIndex("Text")
                                .IsUnique();

                            b1.ToTable("Slugs", "Blog");

                            b1.WithOwner("Post")
                                .HasForeignKey("PostId");

                            b1.Navigation("Post");
                        });

                    b.Navigation("CommentsCounter")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Slug")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
